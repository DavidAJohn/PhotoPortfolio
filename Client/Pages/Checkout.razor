@page "/checkout"

@using PhotoPortfolio.Client.Contracts;
@using PhotoPortfolio.Client.Shared;
@using PhotoPortfolio.Shared.Entities;
@using PhotoPortfolio.Shared.Models;
@using PhotoPortfolio.Shared.Models.Prodigi.Quotes;

@inject IOrderService orderService;
@inject IQuoteService quoteService;
@inject IProductService productService;
@inject IPhotoService photoService;
@inject NavigationManager navigationManager;

<div class="h-auto">
    <div class="px-2 lg:container lg:max-w-6xl md:mt-8 mb-32 lg:mb-64">
        @if (basketItems != null)
        {
            @if (basketItems.Count > 0)
            {
                <div class="w-full p-4 rounded-md shadow-md bg-white focus:outline-none z-10">
                    
                    <div class="grid grid-cols-1 gap-4">
                        <div class="col-span-1">
                            <div class="text-lg text-center mb-8 md:text-xl lg:text-2xl font-bold">
                                Order Summary
                            </div>
                            <div class="p-4 mx-32 text-center">
                                @foreach (BasketItem item in basketItems)
                                {
                                    <div class="font-semibold text-sm mb-2 md:text-base flex items-center justify-center">
                                        @if (!string.IsNullOrEmpty(item.Product.ImageUri))
                                        {
                                            <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.ImageUri" /></div>
                                        }
                                        @if (string.IsNullOrEmpty(item.Product.ImageUri) && !string.IsNullOrEmpty(item.Product.MockupImageUri))
                                        {
                                            <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.MockupImageUri" /></div>
                                        }
                                        <div class="inline-block flex-shrink-0">
                                            <div class="mb-0">@item.Product.ImageTitle</div>
                                            <div class="font-medium text-sm">@item.Product.CustomDescription</div>
                                        </div>
                                        <div class="ml-4 font-bold">=&nbsp; £@item.Total.ToString("0.00")</div>
                                        <button type="button" class="inline-block ml-2 -mr-1 text-red-800" @onclick="() => DeleteItem(item)">
                                            <!-- heroicons: x-circle (solid) -->
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="text-sm lg:text-base font-bold flex items-center justify-center mt-4 mb-8 text-slate-500" id="product-price">
                                <div class="mr-2">Shipping Method:</div>
                                <div>
                                    <Dropdown DropdownTitle="@($"{selectedDeliveryOption} Delivery")" DropdownWidth="Dropdown.DropdownWidthOptions.Medium" DropdownItems="deliveryDropdownOptions" SelectedOption="SelectedDeliveryOption" />
                                </div>
                                <div class="ml-4">
                                    <svg version="1.1" id="delivery-spinner" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                        class="h-5 w-5 @DeliverySpinnerVisible" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                                        <path fill="currentColor" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z">
                                            <animateTransform attributeType="xml"
                                                attributeName="transform"
                                                type="rotate"
                                                from="0 25 25"
                                                to="360 25 25"
                                                dur="0.7s"
                                                repeatCount="indefinite" />
                                        </path>
                                    </svg>
                                </div>
                            </div>
                            @if (DeliverySpinnerVisible != "invisible")
                            {
                                <div class="my-2 px-4 flex justify-center text-sm md:text-base font-semibold">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="150px" Height="33px" />
                                </div>
                                <div class="my-2 px-4 flex justify-center text-sm md:text-base font-semibold">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="125px" Height="33px" />
                                </div>
                            }
                            else
                            {
                                <div class="my-2 px-4 text-center text-sm md:text-base font-semibold text-slate-500">
                                    Delivery:&nbsp; <span class="inline font-bold text-slate-500">£@shippingCosts.ToString("0.00")</span>
                                </div>
                                <div class="my-2 px-4 text-center text-sm md:text-base font-semibold">
                                    Total:&nbsp; <span class="inline font-bold">£@((basketState.Basket.BasketTotal + shippingCosts).ToString("0.00"))</span>
                                </div>
                            }
                            <div class="mt-8 flex justify-center">
                                <button type="button" class="flex justify-center align-items-center py-2 px-4 my-3 bg-green-600 text-white rounded-sm text-sm hover:opacity-90" @onclick="() => PlaceOrder()">
                                    <svg version="1.1" id="order-spinner" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                        class="h-5 w-5 mr-2 @SubmitSpinnerHidden" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                                        <path fill="currentColor" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z">
                                            <animateTransform attributeType="xml"
                                                  attributeName="transform"
                                                  type="rotate"
                                                  from="0 25 25"
                                                  to="360 25 25"
                                                  dur="0.7s"
                                                  repeatCount="indefinite" />
                                        </path>
                                    </svg>
                                    <div id="order-text" class="font-semibold">Place Order</div>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="container p-4 w-full rounded-md shadow-sm bg-white focus:outline-none z-10 " >
                    <div class="mb-4 text-lg text-center md:text-xl lg:text-2xl font-bold">
                        Order Summary
                    </div>
                    <div class="p-4 text-center" role="none">
                        <span class="font-semibold text-base">Your basket is currently empty</span>
                    </div>
                </div>
            }
        }
        @if (ShowErrors)
        {
            <div class="mx-2 text-center animate-pulse">
                <div class="alert-box" role="alert">
                    <span class="block sm:inline">@ErrorMessage</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public BasketState basketState { get; set; }

    private List<BasketItem> basketItems { get; set; }

    private decimal shippingCosts = 0m;

    private string SubmitSpinnerHidden = "hidden";
    private string DeliverySpinnerVisible = "invisible";
    private bool ShowErrors = false;
    private string ErrorMessage = "";

    private List<DropdownItem> deliveryDropdownOptions = new();
    private string selectedDeliveryOption = "Standard";

    protected override async Task OnInitializedAsync()
    {
        AddDeliveryOptions();

        await Task.Run(()=> System.Threading.Thread.Sleep(1)); // forces the page to wait before getting the basket
        basketItems = basketState.Basket.BasketItems;

        await GetBasketQuote();
    }

    private void AddDeliveryOptions()
    {
        deliveryDropdownOptions.Clear();
        string[] deliveryOptions = { "Standard", "Budget", "Express" };

        foreach (var option in deliveryOptions)
        {
            deliveryDropdownOptions.Add(new DropdownItem
                {
                    OptionName = $"{option} Delivery",
                    OptionRef = option
                });
        }
    }

    private async Task DeleteItem(BasketItem item)
    {
        basketState.Basket.BasketItems.Remove(basketState.Basket.BasketItems.FirstOrDefault(
                i => i.Product.CustomDescription == item.Product.CustomDescription &&
                i.Quantity == item.Quantity
            ));

        await basketState.SaveChangesAsync(); // save to local storage
        basketState.BasketItemCount--;
    }

    private async Task PlaceOrder()
    {
        SubmitSpinnerHidden = "";

        OrderBasketDto orderBasketDto = new OrderBasketDto()
        {
            BasketItems = basketItems,
            ShippingMethod = selectedDeliveryOption
        };

        // save initial order to db with items and shipping method
        var orderId = await orderService.CreateInitialOrder(orderBasketDto);

        if (!string.IsNullOrEmpty(orderId))
        {
            orderBasketDto.OrderId = orderId;

            var checkoutUrl = await orderService.CreateCheckoutSession(orderBasketDto);

            if (!string.IsNullOrEmpty(checkoutUrl))
            {
                navigationManager.NavigateTo(checkoutUrl);
            }
            else
            {
                ShowErrors = true;
                ErrorMessage = "Sorry, there was a problem placing your order. Please try again.";
                SubmitSpinnerHidden = "hidden";
            }
        }
        else
        {
            ShowErrors = true;
            ErrorMessage = "Sorry, there was a problem placing your order. Please try again.";
            SubmitSpinnerHidden = "hidden";
        }
    }

    private async Task SelectedDeliveryOption(DropdownItem deliveryOption)
    {
        DeliverySpinnerVisible = "visible";
        await GetBasketQuote(deliveryOption.OptionRef);
        DeliverySpinnerVisible = "invisible";

        selectedDeliveryOption = deliveryOption.OptionRef;
    }

    private async Task GetBasketQuote(string deliveryOption = "Standard")
    {
        List<CreateQuoteItemDto> items = new();
        List<Dictionary<string, string>> assetList = new();
        Dictionary<string, string> assets = new();

        assets.Add("printArea", "default");
        assetList.Add(assets);

        foreach (BasketItem item in basketItems)
        {
            items.Add(new CreateQuoteItemDto
                {
                    Sku = item.Product.ProdigiSku,
                    Copies = 1,
                    Assets = assetList
                });
        }

        CreateQuoteDto quote = new CreateQuoteDto()
            {
                ShippingMethod = deliveryOption,
                DestinationCountryCode = "GB",
                CurrencyCode = "GBP",
                Items = items
            };

        var quoteResponse = await quoteService.GetQuote(quote);

        if (quoteResponse is not null)
        {
            var quotes = quoteResponse.Quotes;
            var quoteReturned = quotes.FirstOrDefault();

            if (quoteReturned is not null && quoteReturned.CostSummary is not null)
            {
                decimal shippingCost = 0m;

                if (!string.IsNullOrWhiteSpace(quoteReturned.CostSummary.Shipping!.Amount))
                {
                    shippingCost = decimal.Parse(quoteReturned.CostSummary.Shipping.Amount);
                    //Console.WriteLine("Shipping Cost: " + shippingCost.ToString());
                }

                shippingCosts = shippingCost;

                // also confirm the basket item costs are still correct
                var quoteItems = quoteReturned.Items;

                foreach (BasketItem item in basketItems)
                {
                    var unitCost = decimal.Parse(quoteItems.FirstOrDefault(i => i.Sku == item.Product.ProdigiSku).UnitCost.Amount);
                    var taxUnitCost = decimal.Parse(quoteItems.FirstOrDefault(i => i.Sku == item.Product.ProdigiSku).TaxUnitCost.Amount);
                    //Console.WriteLine("Unit Cost: " + unitCost.ToString("0.00"));
                    //Console.WriteLine("Tax Unit Cost: " + taxUnitCost.ToString("0.00"));

                    var productId = item.Product.Id;
                    var photoId = item.Product.PhotoId;
                    var photo = await photoService.GetPhotoByIdAsync(photoId);

                    if (photo is not null)
                    {
                        if (photo.Products is not null)
                        {
                            var product = photo.Products.FirstOrDefault(p => p.Id == productId) ?? null!;

                            if (product is not null)
                            {
                                item.Total = ((unitCost + taxUnitCost) * product.MarkupPercentage) / 100;
                                Console.WriteLine("Total Cost: " + item.Total.ToString("0.00"));

                                await basketState.SaveChangesAsync();
                            }
                        }
                    }
                }
            }
        }
    }
}
