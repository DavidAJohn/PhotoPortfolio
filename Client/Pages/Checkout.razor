@page "/checkout"

@using PhotoPortfolio.Client.Contracts;
@using PhotoPortfolio.Client.Shared;

@inject IOrderService orderService;
@inject NavigationManager navigationManager;

<div class="h-auto">
    <div class="px-2 lg:container lg:max-w-6xl md:mt-8 mb-32 lg:mb-64">
        @if (basketItems != null)
        {
            @if (basketItems.Count > 0)
            {
                <div class="w-full p-4 rounded-md shadow-md bg-white focus:outline-none z-10">
                    
                    <div class="grid grid-cols-1 gap-4">
                        <div class="col-span-1">
                            <div class="text-lg text-center mb-8 md:text-xl lg:text-2xl font-bold">
                                Order Summary
                            </div>
                            <div class="p-4 mx-32 text-center" >
                                @foreach (BasketItem item in basketItems)
                                {
                                    <div class="font-semibold text-sm md:text-base flex items-center justify-center">
                                        @if (!string.IsNullOrEmpty(item.Product.ImageUri))
                                        {
                                            <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.ImageUri" /></div>
                                        }
                                        @if (string.IsNullOrEmpty(item.Product.ImageUri) && !string.IsNullOrEmpty(item.Product.MockupImageUri))
                                        {
                                            <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.MockupImageUri" /></div>
                                        }
                                        <div class="inline-block flex-shrink-0">
                                            <div class="mb-0">@item.Product.ImageTitle</div>
                                            <div class="font-medium text-sm">@item.Product.CustomDescription</div>
                                        </div>
                                        <div class="ml-4 font-bold">=&nbsp; £@item.Total</div>
                                        <button type="button" class="inline-block ml-2 -mr-1 text-red-800" @onclick="() => DeleteItem(item)">
                                            <!-- heroicons: x-circle (solid) -->
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="my-2 px-4 text-center text-sm md:text-base font-semibold">
                                Total:&nbsp; <span class="inline font-bold">£@basketState.Basket.BasketTotal</span>
                            </div>
                            <div class="mt-4 text-center">
                                <button type="button" class="p-2 my-3 bg-green-600 text-white rounded-sm text-sm hover:opacity-90" @onclick="() => PlaceOrder()">
                                    Place Order
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="container p-4 w-full rounded-md shadow-sm bg-white focus:outline-none z-10 " >
                    <div class="mb-4 text-lg text-center md:text-xl lg:text-2xl font-bold">
                        Order Summary
                    </div>
                    <div class="p-4 text-center" role="none">
                        <span class="font-semibold text-base">Your basket is currently empty</span>
                    </div>
                </div>
            }
        }
        @if (ShowErrors)
        {
            <div class="mx-2 text-center animate-pulse">
                <div class="alert-box" role="alert">
                    <span class="block sm:inline">@ErrorMessage</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public BasketState basketState { get; set; }

    private List<BasketItem> basketItems { get; set; }

    private bool ShowErrors = false;
    private string ErrorMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(()=> System.Threading.Thread.Sleep(1)); // forces the page to wait before getting the basket
        basketItems = basketState.Basket.BasketItems;
    }

    private async Task DeleteItem(BasketItem item)
    {
        basketState.Basket.BasketItems.Remove(basketState.Basket.BasketItems.FirstOrDefault(
                i => i.Product.CustomDescription == item.Product.CustomDescription &&
                i.Quantity == item.Quantity
            ));

        await basketState.SaveChangesAsync(); // save to local storage
        basketState.BasketItemCount--;
    }

    private async Task PlaceOrder()
    {
        var checkoutUrl = await orderService.CreateCheckoutSession(basketItems);

        if (!string.IsNullOrEmpty(checkoutUrl))
        {
            navigationManager.NavigateTo(checkoutUrl);
        }
        else
        {
            ShowErrors = true;
            ErrorMessage = "Sorry, there was a problem placing your order. Please try again.";
        }
    }
}
