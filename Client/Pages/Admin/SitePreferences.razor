@page "/admin/siteprefs"
@layout AdminLayout

@using Microsoft.AspNetCore.Authorization
@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models;
@using static PhotoPortfolio.Client.Components.Dropdown;

@inject IAdminService adminService

@attribute [Authorize]

<PageTitle>Photo Portfolio : Admin : Site Preferences</PageTitle>

@if (errorMessage != "")
{
    <div class="mx-2 animate-pulse">
        <div class="alert-box" role="alert">
            <span class="block sm:inline">@errorMessage</span>
        </div>
    </div>
}
else if (prefsMetadata == null)
{
    <text>Loading site preferences...</text>
}
else
{
    <div class="m-4 md:m-8">
        <div class="text-3xl">Site Preferences</div>
        <div class="mt-8 w-full lg:w-1/2">
            <span class="inline">Site Name: </span>
            <input class="rounded-sm w-64 border border-gray-700 shadow-sm px-2 py-1 bg-white focus:outline-none"
               @bind-value="@siteName" />
        </div>
        <div class="mt-8 w-full lg:w-1/2">
            <span>Order Approval: </span>
            <Dropdown DropdownTitle="@($"{selectedApprovalOptionName}")"
                DropdownWidth="DropdownWidthOptions.Large"
                DropdownItems="approvalDropdownOptions"
                SelectedOption="SelectedApprovalOption"
                SelectedItemRef="@($"{selectedApprovalOptionRef}")" />
        </div>
    </div>
}

@code {
    private string errorMessage = "";
    private Dictionary<string, string> prefsMetadata = new();
    private string siteName = "";

    private List<DropdownItem> approvalDropdownOptions = new();
    private string selectedApprovalOptionName = "";
    private string selectedApprovalOptionRef = "";

    protected override async Task OnInitializedAsync()
    {
        AddApprovalOptions();
        await GetSitePreferences();

        string orderApproval;
        prefsMetadata.TryGetValue("OrdersSentToProdigiAutomatically", out orderApproval);

        if (!string.IsNullOrWhiteSpace(orderApproval))
        {
            DropdownItem option = approvalDropdownOptions.FirstOrDefault(x => x.OptionRef == orderApproval);
            selectedApprovalOptionRef = option.OptionRef;
            selectedApprovalOptionName = option.OptionName;
        }
    }

    private async Task GetSitePreferences()
    {
        try
        {
            var preferences = await adminService.GetSitePreferencesAsync();
            siteName = preferences.SiteName;
            prefsMetadata = preferences.Metadata;
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve site preferences";
        }
    }

    private async Task UpdateSitePreferences()
    {
        try
        {
            var preferences = await adminService.GetSitePreferencesAsync();

            // update preferences.Metadata with form values from page
            prefsMetadata = preferences.Metadata;

            if (prefsMetadata.ContainsKey("OrdersSentToProdigiAutomatically"))
            {
                prefsMetadata["OrdersSentToProdigiAutomatically"] = selectedApprovalOptionRef;
            }

            var response = await adminService.UpdateSitePreferencesAsync(preferences);

            if (response)
            {
                errorMessage = "";
            }
            else
            {
                Console.WriteLine("Could not update site preferences");
                errorMessage = "Could not update site preferences";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not update site preferences";
        }
    }

    private void AddApprovalOptions()
    {
        approvalDropdownOptions.Clear();

        approvalDropdownOptions.Add(new DropdownItem
            {
                OptionName = "Auto-Approve All Orders",
                OptionRef = "AutoApproveAll"
            });

        approvalDropdownOptions.Add(new DropdownItem
            {
                OptionName = "All Orders Manually Approved",
                OptionRef = "ManuallyApproveAll"
            });

        approvalDropdownOptions.Add(new DropdownItem
            {
                OptionName = "Auto-Approve Below Threshold Amount",
                OptionRef = "AutoApproveBelow"
            });
    }

    private async Task SelectedApprovalOption(DropdownItem selectedOption)
    {
        selectedApprovalOptionRef = selectedOption.OptionRef;
        selectedApprovalOptionName = selectedOption.OptionName;

        await UpdateSitePreferences();
    }
}
