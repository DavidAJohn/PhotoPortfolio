@page "/admin/orders"
@layout AdminLayout

@using Humanizer;
@using Microsoft.AspNetCore.Authorization
@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Helpers;
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models;

@inject IAdminService adminService
@inject NavigationManager navigationManager
@inject IConfiguration config

@attribute [Authorize]

<PageTitle>Photo Portfolio : Admin : Orders</PageTitle>

@if (errorMessage != "")
{
    <div class="mx-2 animate-pulse">
        <div class="alert-box" role="alert">
            <span class="block sm:inline">@errorMessage</span>
        </div>
    </div>
}
else if (orders == null)
{
    <text>Loading orders...</text>
}
else
{
    <div class="m-4 md:m-8">
        <div class="text-3xl mb-8">Orders</div>
        <div class="w-full lg:w-1/2 my-4 flex justify-items-start items-center">
            <div class="mr-2 font-semibold text-base">Sort By:</div>
            <div>
                <Dropdown 
                    DropdownTitle="@sortTitle"
                    DropdownWidth="Dropdown.DropdownWidthOptions.Medium"
                    DropdownItems="@sortOptions"
                    DropdownOutline=true
                    SelectedOption="SelectedSortOption" />
            </div>
        </div>
        <div class="w-full lg:w-1/2 my-4 flex justify-items-start items-center">
            <div class="mr-2 font-semibold text-base">Time Period:</div>
            <div>
                <Dropdown DropdownTitle="@filterTimeTitle"
                    DropdownWidth="Dropdown.DropdownWidthOptions.Medium"
                    DropdownItems="@filterTimeOptions"
                    DropdownOutline=true
                    SelectedOption="SelectedTimeFilterOption" />
            </div>
        </div>
        <div class="w-full lg:w-1/2 my-4 flex justify-items-start items-center">
            <div class="mr-2 font-semibold text-base">Status:</div>
            <div>
                <Dropdown DropdownTitle="@filterStatusTitle"
                    DropdownWidth="Dropdown.DropdownWidthOptions.Medium"
                    DropdownItems="@filterStatusOptions"
                    DropdownOutline=true
                    SelectedOption="SelectedStatusFilterOption" />
            </div>
        </div>
        <div class="w-full lg:w-1/2 my-4 -ml-2 flex justify-items-start items-center">
            <div class="font-semibold text-base">
                <MudCheckBox 
                    T="Boolean"
                    Label="Exlude Orders Where Payments Are Incomplete?" 
                    Size="Size.Medium" 
                    Color="Color.Primary"
                    CheckedChanged="((e) => CheckBoxExcludeIncomplete_CheckedChanged(e))"
                    Checked="excludeIncompleteChecked"
                >
                </MudCheckBox>
            </div>
            <div class="ml-4">
                <svg version="1.1" id="save-prefs-spinner" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                     class="h-5 w-5 @savePrefsSpinnerVisible" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                    <path fill="currentColor" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z">
                        <animateTransform attributeType="xml"
                            attributeName="transform"
                            type="rotate"
                            from="0 25 25"
                            to="360 25 25"
                            dur="0.7s"
                            repeatCount="indefinite" />
                    </path>
                </svg>
            </div>
        </div>
        <div class="w-full lg:w-1/2 mt-4">
            @if (orders is not null)
            {
                <div class="font-semibold text-lg italic mb-4 ml-2">@orders.Count orders found</div>
            }
            @if (orders is not null && orders.Count > 0)
            {
                @foreach (OrderDetailsDto order in orders)
                {
                    <div class="p-8 mb-4 shadow-lg rounded-md flex flex-row">
                        <div class="w-2/3 text-base ">
                            <div class="font-semibold">Date:&nbsp;<span class="font-medium">@order.OrderDate</span></div>
                            @if (!string.IsNullOrEmpty(order.Name))
                            {
                                <div class="font-semibold">Customer:&nbsp;<span class="font-medium">@order.Name (@order.EmailAddress)</span></div>
                            }
                            else
                            {
                                <div class="font-semibold">Customer:&nbsp;<span class="font-medium">Unknown</span></div>
                            }
                            <div class="font-semibold">Total Cost:&nbsp;
                                <span class="font-medium">£@order.TotalCost (Items: @order.Items.Count)</span>
                            </div>
                            <div class="font-semibold">Status:&nbsp;<span class="font-medium">@order.Status.Humanize(LetterCasing.Title)</span></div>
                            <div class="flex items-baseline my-4 text-blue-600 hover:text-blue-800 focus:text-blue-800 hover:cursor-pointer" @onclick="@(() => ViewOrderDetails(order.Id!))">
                                <span class="text-base">@(order.Id == expandedOrderId ? "Hide" : "View") Order Details</span>
                                <span class="text-xs ml-1">&#x279c;</span>
                            </div>
                            <div id="order-details" class="mt-4 @(order.Id == expandedOrderId ? "block" : "hidden")">
                                <div>
                                    @foreach (BasketItem item in order.Items)
                                    {
                                        <div class="mb-0 font-semibold">Id:&nbsp;<span class="font-medium">@order.Id</span></div>
                                        @if (!string.IsNullOrEmpty(order.StripePaymentIntentId))
                                        {
                                            <div class="mb-0 font-semibold">Payment Intent Id:&nbsp;
                                                <div class="font-medium inline">
                                                    <span>
                                                        @order.StripePaymentIntentId
                                                    </span>
                                                    <span>
                                                        <a href="@(@stripeDashboardUrl + @order.StripePaymentIntentId)" target="_blank">
                                                            <MudIcon Icon="@Icons.Filled.OpenInNew" Size="Size.Small" Color="Color.Primary" />
                                                        </a>
                                                    </span>
                                                </div>
                                            </div>
                                        }
                                        <div class="mb-4 font-semibold">Shipping Method:&nbsp;<span class="font-medium">@order.ShippingMethod</span></div>
                                        <div class="font-semibold text-sm md:text-base flex items-center">
                                            @if (!string.IsNullOrEmpty(item.Product.ImageUri))
                                            {
                                                <div class="inline-block w-12 h-auto mr-8"><img src="@item.Product.ImageUri" /></div>
                                            }
                                            @if (string.IsNullOrEmpty(item.Product.ImageUri) && !string.IsNullOrEmpty(item.Product.MockupImageUri))
                                            {
                                                <div class="inline-block w-12 h-auto mr-8"><img src="@item.Product.MockupImageUri" /></div>
                                            }
                                            <div class="inline-block flex-shrink-0">
                                                <div class="mb-0 font-semibold">@item.Product.ImageTitle</div>
                                                <div class="font-medium text-sm">@item.Product.CustomDescription</div>
                                                <div class="font-medium text-xs">Sku:&nbsp;@item.Product.ProdigiSku</div>
                                            </div>
                                            <div class="ml-4 font-semibold">=&nbsp; £@item.Total</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    private List<OrderDetailsDto> orders { get; set; } = null!;
    private string errorMessage = "";

    private OrderSpecificationParams orderParams = new ();
    private List<DropdownItem> sortOptions = new();
    private string sortTitle = "Sorted By";

    private List<DropdownItem> filterTimeOptions = new();
    private string filterTimeTitle = "In Last Year";

    private List<DropdownItem> filterStatusOptions = new();
    private string filterStatusTitle = "Any Status";

    private string expandedOrderId = "";
    private string stripeDashboardUrl => config["Stripe_DashboardRootUrl"] ?? "https://dashboard.stripe.com/test/payments/";

    private Dictionary<string, string> prefsMetadata = new();
    private bool excludeIncompleteChecked = false;
    private string savePrefsSpinnerVisible = "invisible";

    protected override async Task OnInitializedAsync()
    {
        orderParams.SortBy = "ordercreated";
        orderParams.SortOrder = "desc";
        sortTitle = "Order Date (Most Recent First)";

        orderParams.InLastNumberOfDays = 365;
        filterTimeTitle = "In Last Year";

        orderParams.Status = "";
        filterStatusTitle = "Any Status";

        await GetSitePreferences();
        await GetOrders();
    }

    protected override void OnInitialized()
    {
        SetSortOptions();
        SetFilterTimeOptions();
        SetFilterStatusOptions();
    }

    private void SetSortOptions()
    {
        sortOptions.Clear();

        sortOptions.Add(new DropdownItem
            {
                OptionName = "Order Date (Most Recent First)",
                OptionRef = "ordercreated_desc"
            });

        sortOptions.Add(new DropdownItem
            {
                OptionName = "Order Date (Oldest First)",
                OptionRef = "ordercreated_asc"
            });
    }

    private void SetFilterTimeOptions()
    {
        filterTimeOptions.Clear();

        filterTimeOptions.Add(new DropdownItem
            {
                OptionName = "In Last 7 Days",
                OptionRef = "7"
            });

        filterTimeOptions.Add(new DropdownItem
            {
                OptionName = "In Last 14 Days",
                OptionRef = "14"
            });

        filterTimeOptions.Add(new DropdownItem
            {
                OptionName = "In Last 30 Days",
                OptionRef = "30"
            });

        filterTimeOptions.Add(new DropdownItem
            {
                OptionName = "In Last 6 Months",
                OptionRef = "180"
            });

        filterTimeOptions.Add(new DropdownItem
            {
                OptionName = "In Last Year",
                OptionRef = "365"
            });

        filterTimeOptions.Add(new DropdownItem
            {
                OptionName = "All Orders",
                OptionRef = "36500" // 100 years
            });
    }

    private void SetFilterStatusOptions(bool excludePaymentIncomplete = false)
    {
        filterStatusOptions.Clear();

        filterStatusOptions.Add(new DropdownItem
            {
                OptionName = "Any Status",
                OptionRef = "Any"
            });

        string[] statusNames = Enum.GetNames<OrderStatus>();

        foreach(string name in statusNames)
        {
            if (!excludePaymentIncomplete || (excludePaymentIncomplete && name != "PaymentIncomplete"))
            {
                filterStatusOptions.Add(new DropdownItem
                    {
                        OptionName = name.Humanize(LetterCasing.Title), // eg. "Awaiting Approval"
                        OptionRef = name
                    });
            }
        }
    }

    private async Task GetOrders()
    {
        try
        {
            orders = await adminService.GetOrdersAsync(orderParams);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve list of orders";
        }
    }

    private async Task SelectedSortOption(DropdownItem selectedOption)
    {
        string sortBy = selectedOption.OptionRef;
        sortTitle = selectedOption.OptionName;

        orderParams.SortBy = "ordercreated";

        orderParams.SortOrder = sortBy switch
        {
            "ordercreated_asc" => "asc",
            "ordercreated_desc" => "desc",
            _ => "desc"
        };

        orders = await adminService.GetOrdersAsync(orderParams);
    }

    private async Task SelectedTimeFilterOption(DropdownItem selectedOption)
    {
        try
        {
            filterTimeTitle = selectedOption.OptionName;

            orderParams.InLastNumberOfDays = int.Parse(selectedOption.OptionRef);

            orders = await adminService.GetOrdersAsync(orderParams);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve list of orders";
        }
    }

    private async Task SelectedStatusFilterOption(DropdownItem selectedOption)
    {
        try
        {
            filterStatusTitle = selectedOption.OptionName;

            if (selectedOption.OptionRef != "Any")
            {
                orderParams.Status = selectedOption.OptionRef;
            }
            else
            {
                orderParams.Status = "";
            }

            orders = await adminService.GetOrdersAsync(orderParams);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve list of orders";
        }
    }

    private void ViewOrderDetails(string orderId)
    {
        if (orderId == expandedOrderId)
        {
            expandedOrderId = "";
        }
        else
        {
            expandedOrderId = orderId;
        }
    }

    private async Task CheckBoxExcludeIncomplete_CheckedChanged(bool excludeIncomplete)
    {
        if (excludeIncomplete == true)
        {
            if (filterStatusTitle == "Payment Incomplete")
            {
                orderParams.Status = "";
                filterStatusTitle = "Any Status";
            }
        }

        SetFilterStatusOptions(excludeIncomplete);
        excludeIncompleteChecked = excludeIncomplete;
        orderParams.ExcludePaymentIncomplete = excludeIncomplete;
        await UpdateSitePreferences(excludeIncomplete);
        await GetOrders();
    }

    private async Task GetSitePreferences()
    {
        try
        {
            var preferences = await adminService.GetSitePreferencesAsync();
            prefsMetadata = preferences.Metadata;

            if (prefsMetadata.ContainsKey("ExcludeIncompleteFromOrderSearch"))
            {
                bool boolOut;

                if (bool.TryParse(prefsMetadata["ExcludeIncompleteFromOrderSearch"], out boolOut))
                {
                    excludeIncompleteChecked = Convert.ToBoolean(prefsMetadata["ExcludeIncompleteFromOrderSearch"]);
                }
            }

            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve site preferences";
        }
    }

    private async Task UpdateSitePreferences(bool excludeIncomplete)
    {
        savePrefsSpinnerVisible = "visible";

        try
        {
            var preferences = await adminService.GetSitePreferencesAsync();
            prefsMetadata = preferences.Metadata;

            if (prefsMetadata.ContainsKey("ExcludeIncompleteFromOrderSearch"))
            {
                prefsMetadata["ExcludeIncompleteFromOrderSearch"] = excludeIncomplete.ToString();
            }
            else
            {
                prefsMetadata.Add("ExcludeIncompleteFromOrderSearch", excludeIncomplete.ToString());
            }

            var response = await adminService.UpdateSitePreferencesAsync(preferences);

            if (response)
            {
                errorMessage = "";
            }
            else
            {
                Console.WriteLine("Could not update site preferences");
                errorMessage = "Could not update site preferences";
            }

            savePrefsSpinnerVisible = "invisible";
        }
        catch (Exception ex)
        {
            savePrefsSpinnerVisible = "invisible";
            Console.WriteLine(ex.Message);
            errorMessage = "Could not update site preferences";
        }
    }
}
