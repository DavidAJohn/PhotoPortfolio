@page "/admin/orders"
@layout AdminLayout

@using Humanizer;
@using Microsoft.AspNetCore.Authorization
@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Helpers;
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models;

@inject IAdminService adminService
@inject NavigationManager navigationManager

@attribute [Authorize]

<PageTitle>Photo Portfolio : Admin : Orders</PageTitle>

@if (errorMessage != "")
{
    <div class="mx-2 animate-pulse">
        <div class="alert-box" role="alert">
            <span class="block sm:inline">@errorMessage</span>
        </div>
    </div>
}
else if (orders == null)
{
    <text>Loading orders...</text>
}
else
{
    <div class="m-4 md:m-8">
        <div class="text-3xl">Orders</div>
        <div class="w-full lg:w-1/2 my-4">
            <Dropdown 
                DropdownTitle="@sortTitle"
                DropdownWidth="Dropdown.DropdownWidthOptions.Medium"
                DropdownItems="@sortOptions"
                DropdownOutline=true
                SelectedOption="SelectedSortOption" />
        </div>
        <div class="w-full lg:w-1/2">
            @if (orders is not null && orders.Count > 0)
            {
                @foreach (OrderDetailsDto order in orders)
                {
                    <div class="p-8 mb-4 shadow-lg rounded-md flex flex-row">
                        <div class="w-2/3 text-base ">
                            <div class="font-semibold">Order Id:&nbsp;<span class="font-medium">@order.Id</span></div>
                            <div class="font-semibold">Date:&nbsp;<span class="font-medium">@order.OrderDate</span></div>
                            <div class="font-semibold">Name:&nbsp;<span class="font-medium">@order.Name</span></div>
                            <div class="font-semibold">Email Address:&nbsp;<span class="font-medium">@order.EmailAddress</span></div>
                            <div class="font-semibold">Status:&nbsp;<span class="font-medium">@order.Status.Humanize(LetterCasing.Title)</span></div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    private List<OrderDetailsDto> orders { get; set; } = null!;
    private string errorMessage = "";

    private OrderSpecificationParams orderParams = new ();
    private List<DropdownItem> sortOptions = new();
    private string sortTitle = "Sorted By";

    protected override async Task OnInitializedAsync()
    {
        orderParams.SortBy = "ordercreated";
        orderParams.SortOrder = "desc";
        sortTitle = "Order Date (Most Recent First)";

        await GetOrders();
    }

    protected override void OnInitialized()
    {
        SetSortOptions();
    }

    private void SetSortOptions()
    {
        sortOptions.Add(new DropdownItem
            {
                OptionName = "Order Date (Most Recent First)",
                OptionRef = "ordercreated_desc"
            });

        sortOptions.Add(new DropdownItem
            {
                OptionName = "Order Date (Oldest First)",
                OptionRef = "ordercreated_asc"
            });
    }

    private async Task GetOrders()
    {
        try
        {
            orders = await adminService.GetOrdersAsync(orderParams);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve list of orders";
        }
    }

    private async Task SelectedSortOption(DropdownItem selectedOption)
    {
        string sortBy = selectedOption.OptionRef;
        sortTitle = selectedOption.OptionName;

        orderParams.SortBy = "ordercreated";

        orderParams.SortOrder = sortBy switch
        {
            "ordercreated_asc" => "asc",
            "ordercreated_desc" => "desc",
            _ => "desc"
        };

        orders = await adminService.GetOrdersAsync(orderParams);
    }
}