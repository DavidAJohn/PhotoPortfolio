@page "/admin/photos/edit/{Id}"
@layout AdminLayout

@using Microsoft.AspNetCore.Authorization
@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models;

@inject IPhotoService photoService
@inject IAdminService adminService
@inject ISnackbar Snackbar

@attribute [Authorize]

<PageTitle>Photo Portfolio : Admin : Edit Photo</PageTitle>

@if (errorMessage != "")
{
    <div class="mx-2 animate-pulse">
        <div class="alert-box" role="alert">
            <span class="block sm:inline">@errorMessage</span>
        </div>
    </div>
}
else if (photo == null)
{
    <text>Loading photo...</text>
}
else
{
    <div class="m-4 md:m-8 ">
        <div class="text-3xl mb-8">Edit Photo</div>
    </div>
    <div class="my-16 flex flex-row">
        <div class="mx-4">
            <img src="@photo.Uri" class="w-full px-4 lg:w-auto lg:h-112 lg:px-0" id="photo-image" />
        </div>
        <div class="px-2 lg:px-0">
            <div class="text-xl lg:text-3xl font-bold mb-4" id="photo-title">@photo.Title</div>
            <div class="text-sm lg:text-base mb-4 pr-8 text-justify" id="photo-caption">@photo.Caption</div>
            @if (photo.Metadata is not null)
            {
                <div class="text-sm lg:text-base mb-2 text-justify" id="photo-dimensions">
                    Dimensions: @(photo.Metadata.Width)px x @(photo.Metadata.Height)px
                </div>
                <div class="text-sm lg:text-base mb-2 text-justify" id="photo-dimensions">
                    Taken: @photo.Metadata.DateTaken
                </div>
            }
        </div>
    </div>
    <div class="m-4 md:m-8 ">
        <div class="text-2xl mb-8">Products</div>
        @if (photo.Products is not null)
        {
            foreach (var product in photo.Products)
            {
                <div class="mb-8">
                    <div class="text-sm lg:text-base mb-2 text-justify">
                        Sku: @product.ProdigiSku
                    </div>
                    <div class="text-sm lg:text-base mb-2 text-justify">
                        Description: @product.CustomDescription
                    </div>
                    <div class="text-sm lg:text-base mb-2 text-justify">
                        Markup (%): @product.MarkupPercentage
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-sm lg:text-base font-semibold mb-4 text-justify" id="photo-products-empty">
                There are currently no products associated with this image
            </div>
        }
            <div class="my-8 flex">
                <MudButton OnClick="OpenProductDialog" Variant="Variant.Filled" Color="Color.Primary">
                    Add A Product
                </MudButton>
                <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
                    <TitleContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.AddToPhotos" Class="mr-3" /> Add A Product
                        </MudText>
                    </TitleContent>
                    <DialogContent>
                        <div class="p-2">
                            @if (products is not null)
                            {
                            <EditForm id="@ProductFormId" Model="@model" OnValidSubmit="OnValidSubmit">
                                <DataAnnotationsValidator />
                                <Dropdown DropdownTitle="Select a Product:" DropdownItems="dropdownOptions" SelectedOption="SelectedOption" />
                                @if (selectedProduct is not null)
                                {
                                    <div class="mt-4 text-sm lg:text-base text-slate-800 font-semibold">
                                        @selectedProduct.ProdigiSku
                                    </div>
                                }
                                <MudTextField Label="Description" @bind-Value="model.CustomDescription" For="@(() => model.CustomDescription)" />
                                <MudTextField Label="Further Details" Class="mt-3" @bind-Value="model.FurtherDetails" For="@(() => model.FurtherDetails)" />
                                <MudTextField Label="Markup %" Class="mt-3" @bind-Value="model.MarkupPercentage" For="@(() => model.MarkupPercentage)" />
                            </EditForm>
                            }
                            else
                            {
                            <div class="text-sm lg:text-base font-semibold mb-4 text-justify" id="products-dialog-empty">
                                There are currently no products available to be added to this image
                            </div>
                            }
                        </div>
                    </DialogContent>
                    <DialogActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" form="@ProductFormId" Class="px-10">Save</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Close" Class="px-10">Close</MudButton>
                    </DialogActions>
                </MudDialog>
            </div>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    Photo photo = new Photo();
    private string errorMessage = "";

    private bool visible = false;
    private int rating;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    private List<Product> products = null!;
    private bool dropdownOpen = false;
    private List<DropdownItem> dropdownOptions = new();

    PhotoProduct model = new();
    Product selectedProduct = new();
    private string ProductFormId = "productFormId";

    protected override async Task OnInitializedAsync()
    {
        await GetPhotoById();
    }

    private async Task GetPhotoById()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            try
            {
                photo = await photoService.GetPhotoByIdAsync(Id);

                if (photo is not null)
                {
                    errorMessage = "";
                }
                else
                {
                    errorMessage = "Could not find details for this photo";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                errorMessage = "Could not find this photo";
            }
        }
        else
        {
            errorMessage = "Could not find this photo";
        }
    }

    private async Task GetAvailableProducts()
    {
        try
        {
            var allProducts = await adminService.GetProductsAsync();

            if (photo.Products is not null && photo.Products.Count > 0)
            {
                // exclude any products already added to the photo
                products = allProducts.Where(p => photo.Products.All(pp => pp.ProdigiSku != p.ProdigiSku)).ToList();

                dropdownOptions.Clear();

                // convert the products into a list of DropdownItems
                foreach (Product product in products)
                {
                    dropdownOptions.Add(new DropdownItem
                        {
                            OptionName = product.ProdigiSku + " - " + product.ProdigiDescription,
                            OptionRef = product.ProdigiSku
                        });
                }
            }
            else
            {
                products = allProducts;
            }

            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve list of products";
        }
    }

    private async Task OpenProductDialog()
    {
        visible = true;

        // clear the form
        selectedProduct = new();
        model = new(); 

        await GetAvailableProducts();
    }

    void Close()
    {
        visible = false;
    }

    private async Task SelectedOption(string sku)
    {
        selectedProduct = products.FirstOrDefault(p => p.ProdigiSku == sku);
    }

    private async Task OnValidSubmit()
    {
        var productToAdd = new PhotoProduct()
        {
            ProdigiSku = selectedProduct.ProdigiSku,
            ProdigiDescription = selectedProduct.ProdigiDescription,
            ProdigiImageAssetUris = selectedProduct.ProdigiImageAssetUris,
            CustomDescription = model.CustomDescription,
            FurtherDetails = model.FurtherDetails,
            MockupImageUri = "",
            MarkupPercentage = model.MarkupPercentage
        };

        photo.Products?.Add(productToAdd);

        var photoUpdated = await adminService.UpdatePhotoAsync(photo);

        if (photoUpdated)
        {
            visible = false;
            Snackbar.Add($"'{productToAdd.ProdigiSku}' has now been added to this photo", Severity.Success);
        }
        else
        {
            Snackbar.Add("Sorry, there was a problem adding this product to the photo", Severity.Error);
        }
    }
}
