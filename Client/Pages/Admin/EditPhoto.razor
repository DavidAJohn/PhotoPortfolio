@page "/admin/photos/edit/{Id}"
@layout AdminLayout

@using Microsoft.AspNetCore.Authorization
@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models
@using ProdigiProducts = PhotoPortfolio.Shared.Models.Prodigi.Products
@using ProdigiQuotes = PhotoPortfolio.Shared.Models.Prodigi.Quotes

@inject IPhotoService photoService
@inject IAdminService adminService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IQuoteService quoteService
@inject IProductService productService

@attribute [Authorize]

<PageTitle>Photo Portfolio : Admin : Edit Photo</PageTitle>

@if (errorMessage != "")
{
    <div class="mx-2 animate-pulse">
        <div class="alert-box" role="alert">
            <span class="block sm:inline">@errorMessage</span>
        </div>
    </div>
}
else if (photo == null)
{
    <text>Loading photo...</text>
}
else
{
    <div class="m-4 md:m-8 ">
        <div class="pb-4">
            <Breadcrumb BreadcrumbCrumbs="@BreadcrumbCrumbs" />
        </div>

        <div class="text-3xl mb-8">Edit Photo</div>
    </div>
    <div class="my-16 flex flex-row">
        <div class="mx-4">
            <img src="@photo.Uri" class="w-full px-4 lg:w-auto lg:h-112 lg:px-0" id="photo-image" />
        </div>
        <div class="px-2 lg:px-0">
            <div class="text-xl lg:text-3xl font-bold mb-4" id="photo-title">@photo.Title</div>
            <div class="text-sm lg:text-base mb-4 pr-8 text-justify" id="photo-caption">@photo.Caption</div>
            @if (photo.Metadata is not null)
            {
                <div class="text-sm lg:text-base mb-2 text-justify" id="photo-dimensions">
                    Dimensions: @(photo.Metadata.Width)px x @(photo.Metadata.Height)px
                </div>
                <div class="text-sm lg:text-base mb-2 text-justify" id="photo-dimensions">
                    Taken: @photo.Metadata.DateTaken
                </div>
            }
        </div>
    </div>
    <div class="m-4 md:m-8 ">
        <div class="text-2xl mb-8">Products</div>
        <div class="my-4 flex">
            <MudButton OnClick="OpenAddProductDialog" Variant="Variant.Filled" Color="Color.Primary">
                Add A Product
            </MudButton>
        </div>
        @if (photo.Products is not null)
        {
            <div class="mt-8 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-10">
            @foreach (var product in photo.Products)
            {
                <div class="bg-white rounded-lg shadow-lg">
                    <div class="p-8 flex flex-col">
                        <div class="flex flex-row">
                            <div class="w-3/4">
                                <div class="text-sm mb-2 text-justify">
                                    Sku: @product.ProdigiSku
                                </div>
                                <div class="text-sm mb-2">
                                    Description: @product.CustomDescription
                                </div>
                                <div class="text-sm mb-2 text-justify">
                                    Markup (%): @product.MarkupPercentage
                                </div>
                            </div>
                            <div class="w-1/4">
                                @if (!string.IsNullOrEmpty(product.MockupImageUri))
                                {
                                    <div>
                                        <img src="@product.MockupImageUri" class="w-24" />
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="text-sm lg:text-base mt-4 flex space-x-2 justify-items-start">
                            <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.EditNote"
                               Size="Size.Small"
                               Color="Color.Success"
                               @onclick="@(() => OpenEditProductDialog(product))"
                            >
                                Edit
                            </MudButton>
                            <MudButton 
                                Variant="Variant.Filled" 
                                StartIcon="@Icons.Material.Filled.DeleteForever" 
                                Size="Size.Small" 
                                Color="Color.Error"
                                @onclick="@(() => DeleteProduct(product))"
                            >
                                Delete
                            </MudButton>
                        </div>
                    </div>
                </div>
            }
            </div>
        }
        else
        {
            <div class="text-sm lg:text-base font-semibold mb-4 text-justify" id="photo-products-empty">
                There are currently no products associated with this image
            </div>
        }

        <MudDialog @bind-IsVisible="addDialogVisible" Options="dialogOptions">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.AddToPhotos" Class="mr-3" /> Add A Product
                </MudText>
            </TitleContent>
            <DialogContent>
                <div class="p-2">
                    @if (products is not null)
                    {
                    <EditForm id="@AddProductFormId" Model="@model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <Dropdown DropdownTitle="Select a Product:" DropdownItems="dropdownOptions" SelectedOption="SelectedOption" />
                        @if (selectedProduct is not null)
                        {
                            <div class="mb-4 text-sm lg:text-base text-slate-800 font-semibold">
                                @selectedProduct.ProdigiSku
                            </div>
                        }
                        <MudText Class="mb-4">@model.ProdigiDescription</MudText>
                        <MudTextField Label="Description" @bind-Value="model.CustomDescription" For="@(() => model.CustomDescription)" />
                        <MudTextField Label="Further Details" Class="mt-3" @bind-Value="model.FurtherDetails" For="@(() => model.FurtherDetails)" />
                        <MudTextField Label="Markup %" Class="mt-3" @bind-Value="model.MarkupPercentage" For="@(() => model.MarkupPercentage)" />
                    </EditForm>
                    }
                    else
                    {
                    <div class="text-sm lg:text-base font-semibold mb-4 text-justify" id="products-dialog-empty">
                        There are currently no products available to be added to this image
                    </div>
                    }
                </div>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="!addFormIsValid" ButtonType="ButtonType.Submit" form="@AddProductFormId" Class="px-10">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Close" Class="px-10">Close</MudButton>
            </DialogActions>
        </MudDialog>

        <MudDialog @bind-IsVisible="editDialogVisible" Options="dialogOptions">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.EditNote" Class="mr-3" /> Edit Product
                </MudText>
            </TitleContent>
            <DialogContent>
                <div class="p-2">
                    <MudPaper Class="mx-2 my-2">
                        <MudText Class="mb-4">@editedProduct.ProdigiDescription</MudText>
                        <MudText Class="mb-4">@editedProduct.CustomDescription</MudText>
                        <MudTextField Label="Markup Percentage (%)" @bind-Value="editedMarkupPercentage" />
                        @if (wholesalePrice == 0.0m)
                        {
                            <MudSkeleton Class="mt-4" SkeletonType="SkeletonType.Rectangle" Width="200px" Height="33px" />
                        }
                        else
                        {
                            <MudText Class="mt-4">Wholesale Price: £@wholesalePrice.ToString("0.00")</MudText>
                        }
                        <MudText Class="mt-4">Price To Customer (exc. delivery): £@(((((decimal)editedMarkupPercentage / 100) + 1) * wholesalePrice).ToString("0.00"))</MudText>
                    </MudPaper>
                </div>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => EditProduct(editedMarkupPercentage))" form="@EditProductFormId" Class="px-10">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Close" Class="px-10">Close</MudButton>
            </DialogActions>
        </MudDialog>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    Photo photo = new Photo();
    private string errorMessage = "";

    private bool addDialogVisible = false;
    private bool editDialogVisible = false;
    private int rating;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    private List<Product> products = null!;
    private bool dropdownOpen = false;
    private List<DropdownItem> dropdownOptions = new();

    CreatePhotoProductDto model = new();
    Product selectedProduct = new();
    PhotoProduct editedProduct { get; set; }
    int editedMarkupPercentage = 100;
    private string AddProductFormId = "addProductFormId";
    private string EditProductFormId = "editProductFormId";
    private bool addFormIsValid => selectedProduct.Id != null ? true : false;
    decimal wholesalePrice = 0.0m;

    private List<BreadcrumbCrumb> BreadcrumbCrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        await GetPhotoById();
    }

    protected override void OnInitialized()
    {
        BreadcrumbCrumbs.Add(new BreadcrumbCrumb { Id = 1, Name = "Galleries", Uri = "/admin/galleries", Enabled = true });
    }

    private async Task GetPhotoById()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            try
            {
                photo = await photoService.GetPhotoByIdAsync(Id);

                if (photo is not null)
                {
                    errorMessage = "";
                    BreadcrumbCrumbs.Add(new BreadcrumbCrumb { Id = 2, Name = "Edit Gallery", Uri = $"/admin/galleries/edit/{photo.GalleryId}", Enabled = true });
                    BreadcrumbCrumbs.Add(new BreadcrumbCrumb { Id = 3, Name = photo.Title ?? photo.FileName, Uri = "", Enabled = false });
                }
                else
                {
                    errorMessage = "Could not find details for this photo";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                errorMessage = "Could not find this photo";
            }
        }
        else
        {
            errorMessage = "Could not find this photo";
        }
    }

    private async Task GetAvailableProducts()
    {
        try
        {
            var allProducts = await adminService.GetProductsAsync();

            if (photo.Products is not null && photo.Products.Count > 0)
            {
                // exclude any products already added to the photo
                products = allProducts.Where(p => photo.Products.All(pp => pp.ProdigiSku != p.ProdigiSku)).ToList();

                dropdownOptions.Clear();

                // convert the products into a list of DropdownItems
                foreach (Product product in products)
                {
                    dropdownOptions.Add(new DropdownItem
                        {
                            OptionName = product.ProdigiSku + " - " + product.ProdigiDescription,
                            OptionRef = product.ProdigiSku
                        });
                }
            }
            else
            {
                products = allProducts;
            }

            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not retrieve list of products";
        }
    }

    private async Task OpenAddProductDialog()
    {
        addDialogVisible = true;

        // clear the form
        selectedProduct = new();
        model = new(); 

        await GetAvailableProducts();
    }

    private async Task OpenEditProductDialog(PhotoProduct product)
    {
        editDialogVisible = true;

        editedProduct = product;
        editedMarkupPercentage = product.MarkupPercentage;

        var productDetails = await GetProductDetails(product.ProdigiSku);

        if (productDetails is not null)
        {
            editedProduct.ProdigiDescription = productDetails.Description;
        }

        var productQuote = await GetProductQuote(product);

        if (productQuote is not null && productQuote.CostSummary is not null)
        {
            if (!string.IsNullOrWhiteSpace(productQuote.CostSummary.TotalCost!.Amount))
            {
                wholesalePrice = decimal.Parse(productQuote.CostSummary.TotalCost.Amount);
            }
        }
    }

    void Close()
    {
        addDialogVisible = false;
        editDialogVisible = false;
    }

    private void SelectedOption(DropdownItem selectedOption)
    {
        string sku = selectedOption.OptionRef;
        selectedProduct = products.FirstOrDefault(p => p.ProdigiSku == sku) ?? null!;
    }

    private async Task OnValidSubmit()
    {
        var productToAdd = new PhotoProduct(selectedProduct)
        {
            ProdigiSku = selectedProduct.ProdigiSku,
            ProdigiDescription = selectedProduct.ProdigiDescription,
            ProdigiImageAssetUris = selectedProduct.ProdigiImageAssetUris,
            CustomDescription = model.CustomDescription!,
            FurtherDetails = model.FurtherDetails!,
            MockupImageUri = "",
            MarkupPercentage = model.MarkupPercentage
        };

        photo.Products?.Add(productToAdd);

        var photoUpdated = await adminService.UpdatePhotoAsync(photo);

        if (photoUpdated)
        {
            addDialogVisible = false;
            Snackbar.Add($"'{productToAdd.ProdigiSku}' has now been added to this photo", Severity.Success);
        }
        else
        {
            Snackbar.Add("Sorry, there was a problem adding this product to the photo", Severity.Error);
        }
    }

    private async Task DeleteProduct(PhotoProduct product)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to remove this product from this photo?");
        parameters.Add("ButtonText", "Yes, Delete It");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            photo.Products?.Remove(product);

            var photoUpdated = await adminService.UpdatePhotoAsync(photo);

            if (photoUpdated)
            {
                addDialogVisible = false;
                Snackbar.Add($"'{product.ProdigiSku}' has now been removed from this photo", Severity.Success);
            }
            else
            {
                Snackbar.Add("Sorry, there was a problem removing this product from the photo", Severity.Error);
            }
        }
    }

    private async Task EditProduct(int markupPercentage)
    {
        var productToUpdate = photo.Products.FirstOrDefault(p => p.ProdigiSku == editedProduct.ProdigiSku) ?? null!;
        productToUpdate.MarkupPercentage = markupPercentage;

        if (string.IsNullOrEmpty(productToUpdate.Id))
        {
            productToUpdate.Id = null!; // photo update does not work if Id == "" - it must be null
        }

        var photoUpdated = await adminService.UpdatePhotoAsync(photo);

        if (photoUpdated)
        {
            editDialogVisible = false;
            Snackbar.Add($"'{editedProduct.ProdigiSku}' has now been updated for this photo", Severity.Success);
        }
        else
        {
            Snackbar.Add("Sorry, there was a problem editing this product", Severity.Error);
        }
    }

    private async Task<ProdigiQuotes.Quote> GetProductQuote(PhotoProduct product, string deliveryOption = "Standard")
    {
        wholesalePrice = 0.0m;

        var quoteResponse = await quoteService.GetQuote(product.ProdigiSku);

        if (quoteResponse is not null)
        {
            var quotes = quoteResponse.Quotes;
            var quoteReturned = quotes.FirstOrDefault();

            if (quoteReturned is not null) return quoteReturned;
            else
            {
                errorMessage = "Sorry, there was a problem getting a quote for this product";
                return null!;
            }
        }
        else
        {
            errorMessage = "Sorry, there was a problem getting a quote for this product";
            return null!;
        }
    }

    private async Task<ProdigiProducts.ProductDetails> GetProductDetails(string sku)
    {
        var productDetails = await productService.GetProductDetailsAsync(sku);

        if (productDetails is not null) return productDetails;
        else
        {
            errorMessage = "Sorry, there was a problem getting details for this product";
            return null!;
        }
    }
}
