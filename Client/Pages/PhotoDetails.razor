@page "/photo/{Id}"

@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models
@using PhotoPortfolio.Shared.Models.Prodigi.Quotes
@using Humanizer

@inject IPhotoService photoService
@inject IProductService productService
@inject IQuoteService quoteService
@inject ISnackbar snackbar
@inject ISessionStorageService sessionStorage

<HeroImage ImageUri="https://photoportfolioimgs.blob.core.windows.net/repo/bank-phrom-Tzm3Oyu_6sk-unsplash.jpg"
           ImageAlign="bottom"
           HeadlineText="Prints"
           SubTitleText="Purchase prints, wallart, canvas, etc."
           TextDarkMode=false />

<div class="md:container">
    @if (errorMessage != "")
    {
        <div class="alert alert-danger" role="alert">
            <h4>@errorMessage</h4>
        </div>
    }
    else if (photo == null)
    {
        <text>Loading photo details...</text>
    }
    else
    {
        <div class="my-24 grid sm:grid-cols-1 lg:grid-cols-2 gap-16">
            <div class="mx-4 flex justify-end">
                <img src="@photo.Uri" class="w-full px-4 lg:w-auto lg:h-160 lg:px-0" id="photo-image" />
            </div>
            <div class="px-2 lg:px-0">
                <div class="text-xl lg:text-3xl font-bold mb-4" id="photo-title">@photo.Title</div>
                <div class="text-sm lg:text-base mb-4 text-justify" id="photo-caption">@photo.Caption</div>

                @if (dropdownOptions.Count > 0)
                {
                    <Dropdown DropdownTitle="Available as:" 
                        DropdownItems="dropdownOptions" 
                        DropdownWidth="Dropdown.DropdownWidthOptions.Large" 
                        DropdownOutline=true 
                        SelectedOption="SelectedOption" />

                    @if (!optionSelected)
                    {
                        <div class="mt-4 text-sm lg:text-base text-slate-800 font-semibold italic" id="product-instructions">
                            @initialInstructionsText
                        </div>
                    }
                    else
                    {
                        if (product is not null)
                        {
                            <div class="text-base lg:text-lg font-semibold mt-4 italic" id="product-title">
                                @product.CustomDescription
                            </div>
                            <!-- Product options -->
                            @if (productOptions.Count > 0)
                            {
                                foreach (var option in productOptions)
                                {
                                    <div class="flex flex-row items-center justify-start mt-2">
                                        <div class="mr-4 text-lg font-semibold">
                                            @option.Key.Humanize(LetterCasing.Title) :
                                        </div>
                                        <div class="">
                                            <ProductOptionDropdown 
                                                DropdownLabel=@option.Key
                                                DropdownItems=@(CreateDropdownItemList(option.Value))
                                                DropdownWidth="ProductOptionDropdown.DropdownWidthOptions.Small"
                                                DropdownOutline=true
                                                SelectedProductOption="SelectedProductOption" />
                                        </div>
                                    </div>
                                }
                            }
                            <!-- Pricing -->
                            @if (awaitingQuote)
                            {
                                <div class="mt-8" id="product-price-skeleton">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="325px" Height="20px" />
                                </div>
                                <div class="mt-4 mb-8" id="product-purchase-button-skeleton">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="150px" Height="33px" />
                                </div>
                            }

                            @if (quoteReceived && quoteError == "")
                            {
                                <div class="text-sm lg:text-base font-bold mt-8 text-slate-500" id="product-price">
                                    <div class="">Price: @productPrice (excluding delivery)</div>
                                </div>
                                <div class="mt-4 mb-8" id="product-purchase-button">
                                    <button class="flex flex-row justify-start items-center bg-emerald-800 p-2 rounded-sm sm:text-center hover:opacity-90" @onclick="AddItemToBasket">
                                        <span class="text-gray-50 ml-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                            </svg>
                                        </span>
                                        <span class="text-gray-50 text-sm ml-3 mr-2 hover:cursor-pointer">Add to Basket</span>
                                    </button>
                                </div>
                            }

                            @if (quoteError != "")
                            { 
                                <div class="text-sm lg:text-base font-bold mt-8 text-red-500" id="product-price-error">
                                    @quoteError
                                </div>
                            }

                            <!-- Detailed product description -->
                            <div class="mt-8 text-sm lg:text-base text-slate-800" id="product-description">
                                @product.FurtherDetails
                            </div>

                            <!-- Mock-up and additional image assets -->
                            <div class="mt-8 flex flex-row justify-start lg:flex-col w-160" id="product-images-container">
                                @if (product.MockupImageUri != "")
                                {
                                    <div class="product-mockup">
                                        <img class="h-56" src="@product.MockupImageUri" />
                                    </div>
                                }
                                @if (product.ProdigiImageAssetUris.Count > 0)
                                {
                                    foreach (var imageAssetUri in product.ProdigiImageAssetUris)
                                    {
                                        <div class="product-asset">
                                            <img class="h-32" src="@imageAssetUri" />
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else 
                        {
                            <div class="mt-4 text-sm lg:text-base text-slate-800 font-semibold italic">
                                Unfortunately, we could not find further details for the selected product
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="mt-8 text-sm lg:text-base text-red-500 italic">
                        Sorry, this image is not currently available for purchase
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [CascadingParameter]
    public BasketState basketState { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Photo photo = null!;
    private string errorMessage = "";

    private List<DropdownItem> dropdownOptions = new();

    private List<PhotoProduct> products = new();
    private PhotoProduct product { get; set; }
    private Dictionary<string, string[]> productOptions = new();

    private string initialInstructionsText = "Choose an option above to see further details, including prices.";

    private bool optionSelected = false;

    private string productPrice = "";
    private bool quoteReceived = false;
    private string quoteError = "";
    private bool awaitingQuote = false;

    private Dropdown selectedDropdown;

    protected override async Task OnInitializedAsync()
    {
        await GetPhotoById();
        await sessionStorage.RemoveItemAsync("product_options");
    }

    private async Task GetPhotoById()
    {
        try
        {
            photo = await photoService.GetPhotoByIdAsync(Id);

            if (photo is not null)
            {
                if (photo.Products is not null && photo.Products.Count > 0)
                {
                    products = photo.Products;

                    foreach (PhotoProduct product in products)
                    {
                        dropdownOptions.Add(new DropdownItem
                            {
                                OptionName = product.CustomDescription,
                                OptionRef = product.ProdigiSku
                            });
                    }
                }

                errorMessage = "";
            }
            else
            {
                errorMessage = "Could not find details for this photo";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not find this photo";
        }
    }

    private async Task SelectedOption(DropdownItem selectedOption)
    {
        string sku = selectedOption.OptionRef;
        productPrice = "";

        if (products is not null)
        {
            product = products.FirstOrDefault(p => p.ProdigiSku == sku, null!);

            if (product is not null)
            {
                optionSelected = true;
                awaitingQuote = true;

                // get a quote
                await GetProductQuote(product);

                awaitingQuote = false;
            }
            else
            {
                awaitingQuote = false;
                initialInstructionsText = "Sorry, details for this product could not be found";
            }
        }

        productOptions.Clear();

        var productDetails = await productService.GetProductDetailsAsync(sku);
        if (productDetails.Attributes is not null)
        {
            // create list of productOptions where the productDetails.Attributes value is an array of length > 1
            if (productDetails.Attributes != null)
            {
                foreach (var attribute in productDetails.Attributes)
                {
                    if (attribute.Value.Length > 1)
                    {
                        productOptions.Add(attribute.Key, attribute.Value);
                    }
                }
            }
        }
    }

    private async Task GetProductQuote(PhotoProduct product, string deliveryOption = "Standard")
    {
        var quoteResponse = await quoteService.GetQuote(product.ProdigiSku, null!, deliveryOption);

        if (quoteResponse is not null)
        {
            var quotes = quoteResponse.Quotes;
            var quoteReturned = quotes.FirstOrDefault();

            if (quoteReturned is not null && quoteReturned.CostSummary is not null)
            {
                if (AnyNulls(quoteReturned.CostSummary) == false)
                {
                    decimal itemsCost = 0m;
                    decimal shippingCost = 0m;
                    decimal salesTaxCost = 0m;

                    if (!string.IsNullOrWhiteSpace(quoteReturned.CostSummary.Items!.Amount))
                    {
                        itemsCost = decimal.Parse(quoteReturned.CostSummary.Items.Amount);
                        //Console.WriteLine("Items Cost: " + itemsCost.ToString("0.00"));
                    }

                    if (!string.IsNullOrWhiteSpace(quoteReturned.CostSummary.Shipping!.Amount))
                    {
                        shippingCost = decimal.Parse(quoteReturned.CostSummary.Shipping.Amount);
                        //Console.WriteLine("Shipping Cost: " + shippingCost.ToString());
                    }

                    if (!string.IsNullOrWhiteSpace(quoteReturned.CostSummary.TotalTax!.Amount))
                    {
                        salesTaxCost = decimal.Parse(quoteReturned.CostSummary.TotalTax.Amount);
                        //Console.WriteLine("Sales Tax Cost: " + salesTaxCost.ToString("0.00"));
                    }

                    decimal salesTaxMultiplier = ((100 / ((itemsCost + shippingCost) / salesTaxCost)) / 100) + 1;
                    //Console.WriteLine("Sales Tax Multiplier: " + salesTaxMultiplier.ToString("0.00"));

                    int markupPercentage = await GetMarkupPercentage(product);
                    //Console.WriteLine($"Markup Percentage: {markupPercentage}%");
                    decimal totalCost = 0m;

                    if (markupPercentage == 0) 
                    {
                        totalCost = (itemsCost * salesTaxMultiplier);
                    }
                    else
                    {
                        decimal markupMultiplier = ((decimal)markupPercentage / 100) + 1;
                        //Console.WriteLine($"Markup Multiplier: {markupMultiplier}");
                        totalCost = (itemsCost * salesTaxMultiplier) * markupMultiplier;
                    }

                    //Console.WriteLine("Total Cost: " + totalCost.ToString("0.00"));

                    quoteReceived = true;
                    quoteError = "";
                    productPrice = "£" + totalCost.ToString("0.00");
                }
                else
                {
                    quoteError = "Unfortunately, we could not retrieve a price for this item at the moment";
                }
            }
            else 
            {
                quoteError = "Unfortunately, we could not retrieve a price for this item at the moment";
            }
        }
        else 
        {
            quoteError = "Unfortunately, we could not retrieve a price for this item at the moment";
        }
    }

    private async Task AddItemToBasket()
    {
        var productOptions = await sessionStorage.GetItemAsync<List<ProductOptionSelected>>("product_options");

        // remove product options from session storage
        await sessionStorage.RemoveItemAsync("product_options");

        var productToAdd = new ProductBasketItemDto(product)
            {
                Id = product.Id,
                ProdigiSku = product.ProdigiSku,
                ProdigiDescription = product.ProdigiDescription,
                CustomDescription = product.CustomDescription,
                FurtherDetails = product.FurtherDetails,
                MockupImageUri = product.MockupImageUri,
                PhotoId = photo.Id,
                ImageUri = photo.Uri,
                ImageTitle = photo.Title,
                Options = productOptions
            };

        var tempPrice = productPrice.Remove(0,1);
        decimal totalPrice = decimal.Parse(tempPrice);
        var item = new BasketItem { Product = productToAdd, Quantity = 1, Total = totalPrice };

        basketState.Basket.BasketItems.Add(item);
        await basketState.SaveChangesAsync(); // save to local storage
        basketState.BasketItemCount++;

        snackbar.Add("A new item has been added to your basket", Severity.Success);
    }

    private bool AnyNulls(CostSummary costSummary)
    {
        foreach (object prop in costSummary.GetType().GetProperties())
        {
            if (prop is null)
            {
                return true;
            }
        }

        return false;
    }

    private async Task<int> GetMarkupPercentage(PhotoProduct product)
    {
        int markupPercentage = product.MarkupPercentage;

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    // Console.WriteLine($"User '{authUser}' is authenticated - no markup % applied");
                    // This application uses Azure AD with one admin user, but additionally perhaps a role could be checked
                    markupPercentage = 0;
                }

                return markupPercentage;
            }
        }

        return markupPercentage;
    }

    private static List<DropdownItem> CreateDropdownItemList(string[] options)
    {
        var dropdownItems = new List<DropdownItem>();

        foreach (var option in options)
        {
            var dropdownItem = new DropdownItem
            {
                OptionName = option.Humanize(LetterCasing.Title),
                OptionRef = option,
            };

            dropdownItems.Add(dropdownItem);
        }

        return dropdownItems;
    }

    private async Task SelectedProductOption(ProductOptionSelected selectedOption)
    {
        var productOptions = await sessionStorage.GetItemAsync<List<ProductOptionSelected>>("product_options");

        if (productOptions is null)
        {
            productOptions = new List<ProductOptionSelected>();
        }

        var existingOption = productOptions.FirstOrDefault(x => x.OptionLabel == selectedOption.OptionLabel);

        if (existingOption is not null)
        {
            productOptions.Remove(existingOption);
        }

        productOptions.Add(selectedOption);

        await sessionStorage.SetItemAsync("product_options", productOptions);
    }
}
