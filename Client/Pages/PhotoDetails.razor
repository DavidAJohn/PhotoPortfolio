@page "/photo/{Id}"

@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Entities
@using PhotoPortfolio.Shared.Models

@inject IPhotoService photoService
@inject IProductService productService

<HeroImage ImageUri="https://photoportfolioimgs.blob.core.windows.net/repo/bank-phrom-Tzm3Oyu_6sk-unsplash.jpg"
           ImageAlign="bottom"
           HeadlineText="Prints"
           SubTitleText="Purchase prints, wallart, canvas, etc."
           TextDarkMode=false />

<div class="md:container">
    @if (errorMessage != "")
    {
        <div class="alert alert-danger" role="alert">
            <h4>@errorMessage</h4>
        </div>
    }
    else if (photo == null)
    {
        <text>Loading photo details...</text>
    }
    else
    {
        <div class="my-24 grid sm:grid-cols-1 lg:grid-cols-2 gap-16">
            <div class="mx-4 flex justify-end">
                <img src="@photo.Uri" class="w-full px-4 lg:w-auto lg:h-160 lg:px-0" />
            </div>
            <div class="px-8 lg:px-0">
                <div class="text-xl lg:text-2xl font-bold mb-4">@photo.Title</div>
                <div class="text-sm lg:text-base mb-8 text-justify">@photo.Caption</div>

                @if (dropdownOptions.Count > 0)
                {
                    <Dropdown DropdownTitle="Available as:" DropdownItems="dropdownOptions" SelectedOption="SelectedOption" />

                    <div class="mt-8 text-sm lg:text-base text-slate-800" id="product-description">
                        @descriptionText
                    </div>
                }
                else
                {
                    <div class="mt-8 text-sm lg:text-base text-red-500 italic">
                        Sorry, this image is not currently available for purchase
                    </div>
                }

            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private Photo photo = null!;
    private string errorMessage = "";

    private List<DropdownItem> dropdownOptions = new();

    private string descriptionText = "Choose an option above to see further details, including prices.";

    protected override async Task OnInitializedAsync()
    {
        await GetPhotoById();
        await GetProductsForPhoto();
    }

    private async Task GetPhotoById()
    {
        try
        {
            photo = await photoService.GetPhotoByIdAsync(Id);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not find this photo";
        }
    }

    private async Task GetProductsForPhoto()
    {
        try
        {
            var products = await productService.GetProductsForPhotoAsync(Id);

            foreach (var product in products)
            {
                dropdownOptions.Add(new DropdownItem
                    {
                        OptionName = product.CustomDescription,
                        OptionRef = product.ProdigiSku
                    });
            }

            errorMessage = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "Could not find products for this photo";
        }
    }

    private void SelectedOption(string sku)
    {
        var product = dropdownOptions.First(d => d.OptionRef == sku);

        if (product is not null)
        {
            descriptionText = product.OptionName;
        }
    }
}
