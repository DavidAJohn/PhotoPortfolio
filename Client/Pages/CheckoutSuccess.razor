@page "/checkout/success/"

@using PhotoPortfolio.Client.Contracts;
@using PhotoPortfolio.Shared.Models;

@inject IOrderService orderService;

<PageTitle>@pageTitle</PageTitle>

<div class="min-h-full">
    <div class="mt-8 md:container md:max-w-7xl mb-24">
        <div class="w-full px-4 md:px-12 py-12 rounded-md shadow-md bg-white focus:outline-none z-10">
            @if (order is not null)
            {
                <div class="mb-4 flex flex-row justify-center items-center">
                    <div class="text-green-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 md:h-16 md:w-16" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(customerName))
                    {
                        <div class="ml-2 text-lg md:text-xl lg:text-2xl font-bold relative">Thanks for your order, @customerName !</div>
                    }
                </div>
                <div class="p-4 mx-8 lg:mx-32 text-center">
                    @if (order.Items is not null)
                    {
                        <div class="mb-8 text-center">
                            <div class="text-lg font-bold">Order Placed on: @order.OrderDate.ToShortDateString()</div>
                        </div>
                        @foreach (BasketItem item in order.Items)
                        {
                            <div class="font-semibold text-sm md:text-base flex items-center justify-center">
                                @if (!string.IsNullOrEmpty(item.Product.ImageUri))
                                {
                                    <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.ImageUri" /></div>
                                }
                                @if (string.IsNullOrEmpty(item.Product.ImageUri) && !string.IsNullOrEmpty(item.Product.MockupImageUri))
                                {
                                    <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.MockupImageUri" /></div>
                                }
                                <div class="inline-block flex-shrink-0">
                                    <div class="mb-0">@item.Product.ImageTitle</div>
                                    <div class="font-medium text-sm">@item.Product.CustomDescription</div>
                                </div>
                                <div class="ml-4 font-bold">=&nbsp; £@item.Total</div>
                            </div>
                        }
                        <div class="my-2 px-4 text-center text-sm md:text-base font-semibold">
                            Total:&nbsp; <span class="inline font-bold">£@order.TotalCost</span>
                        </div>
                    }
                </div>
                <div class="mt-8 text-center">
                    @if (order is not null && orderApproved)
                    {
                        <div class="text-lg font-bold mb-4">We have received your order and will arrange for delivery.</div>
                    }
                    else
                    {
                        <div class="text-lg font-bold mb-4">We have received your order and will check everything before arranging for delivery.</div>
                    }
                </div>
            }
            @if (ShowErrors)
            {
                <div class="mx-4 mb-48 text-center animate-pulse">
                    <div class="alert-box" role="alert">
                        <span class="block sm:inline">@ErrorMessage</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Session_Id { get; set; }

    [CascadingParameter]
    public BasketState basketState { get; set; }

    private string orderId = "";
    private string customerName = "";
    private OrderDetailsDto order { get; set; }
    private bool orderApproved = false;

    private bool ShowErrors = false;
    private string ErrorMessage = "";

    private string pageTitle = "";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Session_Id))
        {
            ShowErrors = true;
            ErrorMessage = "Order details could not be retrieved";
            pageTitle = "Error!";
        }
        else
        {
            await EmptyBasket();
            await GetOrderDetails();
        }
    }

    private async Task EmptyBasket()
    {
        basketState.Basket.BasketItems.Clear();
        await basketState.SaveChangesAsync(); // update local storage
        basketState.BasketItemCount = 0;
    }

    private async Task GetOrderDetails()
    {
        var checkoutSessionResponse = await orderService.GetOrderFromCheckoutSession(Session_Id);

        if (checkoutSessionResponse is not null)
        {
            orderId = checkoutSessionResponse.OrderId;
            customerName = checkoutSessionResponse.CustomerName;

            var completedOrder = await orderService.GetOrderDetailsFromId(orderId);

            if (completedOrder is not null)
            {
                order = completedOrder;
                pageTitle = "Thank You!";

                // check if order should be auto-approved
                var approve = await ShouldApproveOrder(orderId);

                if (approve) orderApproved = true;
            }
            else
            {
                ShowErrors = true;
                ErrorMessage = "Order details could not be retrieved";
                pageTitle = "Error!";
            }
        }
        else
        {
            ShowErrors = true;
            ErrorMessage = "Order details could not be retrieved";
            pageTitle = "Error!";
        }
    }

    private async Task<bool> ShouldApproveOrder(string orderId)
    {
        return await orderService.ShouldApproveOrder(orderId);
    }
}
