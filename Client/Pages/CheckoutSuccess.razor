@page "/checkout/success/"

@using PhotoPortfolio.Client.Contracts;

@inject IOrderService orderService;

<PageTitle>Thank You!</PageTitle>

<div class="min-h-full">
    <div class="mt-8 md:container md:max-w-7xl mb-24">
        <div class="w-full px-4 md:px-12 py-12 rounded-md shadow-md bg-white focus:outline-none z-10">
            <div class="mb-4 flex flex-row justify-center items-center">
                <div class="text-green-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 md:h-16 md:w-16" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                </div>
                @if (!string.IsNullOrWhiteSpace(customerName))
                {
                    <div class="ml-2 text-lg md:text-xl lg:text-2xl font-bold relative">Thanks for your order, @customerName !</div>
                }
            </div>
            <div class="p-4 mt-8 mx-8 lg:mx-32 text-center">
                @if (orderItems is not null)
                {
                    @foreach (BasketItem item in orderItems)
                    {
                        <div class="font-semibold text-sm md:text-base flex items-center justify-center">
                            @if (!string.IsNullOrEmpty(item.Product.ImageUri))
                            {
                                <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.ImageUri" /></div>
                            }
                            @if (string.IsNullOrEmpty(item.Product.ImageUri) && !string.IsNullOrEmpty(item.Product.MockupImageUri))
                            {
                                <div class="inline-block w-16 h-auto mr-4"><img src="@item.Product.MockupImageUri" /></div>
                            }
                            <div class="inline-block flex-shrink-0">
                                <div class="mb-0">@item.Product.ImageTitle</div>
                                <div class="font-medium text-sm">@item.Product.CustomDescription</div>
                            </div>
                            <div class="ml-4 font-bold">=&nbsp; £@item.Total</div>
                        </div>
                    }
                    <div class="my-2 px-4 text-center text-sm md:text-base font-semibold">
                        Total:&nbsp; <span class="inline font-bold">£@orderTotal</span>
                    </div>
                }
            </div>
            <div class="mt-8 text-center">
                <div class="text-lg font-bold mb-4">We have received your order and will arrange for delivery.</div>
                <div class="text-lg font-bold mb-4">Your Order Id: @orderId</div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Session_Id { get; set; }

    [CascadingParameter]
    public BasketState basketState { get; set; }

    private string orderId = "";
    private string customerName = "";
    private List<BasketItem>? orderItems;
    private decimal orderTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        await EmptyBasket();
        await GetOrderDetails();
    }

    private async Task EmptyBasket()
    {
        basketState.Basket.BasketItems.Clear();
        await basketState.SaveChangesAsync(); // update local storage
        basketState.BasketItemCount = 0;
    }

    private async Task GetOrderDetails()
    {
        var checkoutSessionResponse = await orderService.GetOrderFromCheckoutSession(Session_Id);

        if (checkoutSessionResponse is not null)
        {
            orderId = checkoutSessionResponse.OrderId;
            customerName = checkoutSessionResponse.CustomerName;

            var order = await orderService.GetOrderDetailsFromId(orderId);

            if (order is not null)
            {
                orderItems = order.Items;
                orderTotal = order.TotalCost;
            }
        }
        else
        {
            orderId = "Unknown";
        }
    }
}
