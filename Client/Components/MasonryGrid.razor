@using PhotoPortfolio.Client.Contracts
@using PhotoPortfolio.Shared.Entities

@inject IGalleryService galleryService

<div class="mb-32 mx-auto @darkModeStyles">
    @if (!string.IsNullOrEmpty(Title))
    {
        <div class="mb-16 w-full mx-auto font-bold text-base uppercase text-center">
            @Title
        </div>
    }
    <div class="columns-1 lg:columns-3 space-y-2 lg:space-y-4 p-4 md:p-0 md:w-1/2 mx-auto">
        @if (photos is not null)
        {
            @foreach (Photo photo in photos)
            {
                <div class="group relative overflow-hidden hover:cursor-pointer" @onclick="@(() => ShowPhoto(photo.Id))">
                    <img class="object-cover group-hover:brightness-75 transition ease-in-out duration-700 group-hover:scale-105" src=@photo.Uri />
                    <div class="absolute invisible group-hover:!visible text-xl text-white top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 ">
                        View
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    [Parameter]
    public string GalleryId { get; set; } = "62791e80cc28b5b11025378a"; // landscapes gallery

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public bool DarkMode { get; set; } = false;

    private List<Photo> photos = null!;
    private string errorMessage = "";
    private string darkModeStyles => DarkMode ? " bg-gray-700 text-gray-50 pt-16 pb-24 " : "";

    protected override async Task OnInitializedAsync()
    {
        await GetGalleryPhotos();
    }

    private async Task GetGalleryPhotos()
    {
        try
        {
            var gallery = await galleryService.GetGalleryByIdAsync(GalleryId);

            if (gallery is not null) 
            {
                photos = gallery.Photos;
                errorMessage = "";
            }
            else 
            {
                errorMessage = "No images found for this gallery";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = "No images found for this gallery";
        }
    }

    private async Task ShowPhoto(string photoId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(LightboxModal.PhotoId), photoId);

        var options = new ModalOptions()
            {
                Animation = ModalAnimation.FadeInOut(0.5),
                Class = "custom-modal-container"
            };

        var lightboxModal = Modal.Show<LightboxModal>("", parameters, options);
        var result = await lightboxModal.Result;

        if (!result.Cancelled)
        {
            Console.WriteLine(result.Data);
        }
    }
}
