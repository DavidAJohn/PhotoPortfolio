@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Accept=".jpg,.png" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                    @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Default" Text="@file" OnClose="RemoveFile" Class="z-30" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" StartIcon="@Icons.Filled.CloudUpload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>

@code {
    [Parameter]
    public string? GalleryId { get; set;  }

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full ";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private List<IBrowserFile> validatedFiles = new();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (e.FileCount <= 5) // arbitrary limit during development
        {
            var files = e.GetMultipleFiles();

            foreach (var file in files)
            {
                if (file.ContentType != "image/jpeg" && file.ContentType != "image/png")
                {
                    Snackbar.Add($"Only .jpg and .png files can be uploaded - '{file.Name}' was excluded", Severity.Warning);
                }
                else
                {
                    if (file.Size > 2097152) // 2097152 = 2Mb (probably use 20-25Mb in production)
                    {
                        Snackbar.Add($"'{file.Name}' is to large. The limit is 2Mb", Severity.Warning);
                    }
                    else
                    {
                        fileNames.Add(file.Name);
                        validatedFiles.Add(file);
                    }
                }
            }
        }
        else
        {
            Snackbar.Add("Only 5 photos at a time can be uploaded", Severity.Error);
        }
    }

    private async Task Clear()
    {
        fileNames.Clear();
        validatedFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void RemoveFile(MudChip chip)
    {
        fileNames.Remove(chip.Text);

        var index = validatedFiles.FindIndex(x => x.Name == chip.Text);

        if (index != -1)
        {
            validatedFiles.RemoveAt(index);
        }
    }

    private void Upload()
    {
        foreach (var file in validatedFiles)
        {
            Snackbar.Add($"Uploaded: {file.Name}", Severity.Success);
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
