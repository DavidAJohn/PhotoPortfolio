@using PhotoPortfolio.Client.Contracts;
@using PhotoPortfolio.Shared.Entities;
@using PhotoPortfolio.Shared.Models;
@using System.Net.Http.Headers;

@inject ISnackbar Snackbar
@inject IHttpClientFactory httpClient
@inject IAdminService adminService

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Accept=".jpg,.png" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                    @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Default" Text="@file" OnClose="RemoveFile" Class="z-30" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" StartIcon="@Icons.Filled.CloudUpload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>

@code {
    [Parameter]
    public string? GalleryId { get; set;  }

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full ";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new();
    private List<IBrowserFile> validatedFiles = new();
    private List<UploadResult> uploadResults = new();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (e.FileCount <= 5) // arbitrary limit during development
        {
            var files = e.GetMultipleFiles();

            foreach (var file in files)
            {
                if (file.ContentType != "image/jpeg" && file.ContentType != "image/png")
                {
                    Snackbar.Add($"Only .jpg and .png files can be uploaded - '{file.Name}' was excluded", Severity.Warning);
                }
                else
                {
                    if (file.Size > 2097152) // 2097152 = 2Mb (probably use 20-25Mb in production)
                    {
                        Snackbar.Add($"'{file.Name}' is too large. The limit is 2Mb", Severity.Warning);
                    }
                    else
                    {
                        fileNames.Add(file.Name);
                        validatedFiles.Add(file);
                    }
                }
            }
        }
        else
        {
            Snackbar.Add("Only 5 photos at a time can be uploaded", Severity.Error);
        }
    }

    private async Task Clear()
    {
        fileNames.Clear();
        validatedFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void RemoveFile(MudChip chip)
    {
        fileNames.Remove(chip.Text);

        var index = validatedFiles.FindIndex(x => x.Name == chip.Text);

        if (index != -1)
        {
            validatedFiles.RemoveAt(index);
        }
    }

    private async Task Upload()
    {
        var upload = false;
        using var content = new MultipartFormDataContent();
        var maxFileSize = 2097152; // 2Mb

        foreach (var file in validatedFiles)
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                uploadResults.Add(
                    new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
            }
        }

        if (upload)
        {
            var client = httpClient.CreateClient("PhotoPortfolio.ServerAPI.Secure");
            var response = await client.PostAsync("uploads", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<UploadResult>>();

            uploadResults = uploadResults.Concat(newUploadResults).ToList();

            foreach (var result in uploadResults)
            {
                if (result.Uploaded)
                {
                    // add each successful upload to the photo collection in the database

                    Photo photo = new Photo()
                    {
                        Title = result.Title ?? "",
                        Caption = result.Subject,
                        FileName = result.FileName ?? "",
                        Uri = result.AzureUri,
                        GalleryId = GalleryId,
                        Metadata = result.Metadata
                    };

                    var newPhoto = await adminService.AddPhotoAsync(photo);

                    if (newPhoto)
                    {
                        Console.WriteLine($"'{result.FileName}' was uploaded to Azure and added to the database successfully");
                        Snackbar.Add($"'{result.FileName}' has been added to the gallery", Severity.Success);
                    }
                    else
                    {
                        Console.WriteLine($"'{result.FileName}' was uploaded to Azure, but NOT added to the database");
                        Snackbar.Add($"There was a problem adding '{result.FileName}' to the database", Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"There was a problem uploading '{result.FileName}'", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("There was a problem uploading these files", Severity.Error);
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
